# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI/CD with Gradle for bb-feed-api

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

jobs:

  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: temurin
      - name: Read app name and version from Gradle properties
        id: prop-reader
        run: |
          echo "VERSION=$(./gradlew properties -q | grep '^version:' | awk '{print $2}')" >> $GITHUB_OUTPUT
          echo "VERSION=$(./gradlew properties -q | grep '^version:' | awk '{print $2}')" >> $GITHUB_ENV
          echo "APP_NAME=$(./gradlew properties -q | grep '^app_name:' | awk '{print $2}')" >> $GITHUB_ENV
          echo "VERSION=${{ env.VERSION }}" > env.properties
          echo "APP_NAME=${{ env.APP_NAME }}" > env.properties

      - name: Update runner
        run: |
          sudo apt-get update

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Clean and build application
        run: ./gradlew clean build -x test

      - name: Build and tag Docker image
        run: |
          docker build -t ${{ env.APP_NAME }}:${{ env.VERSION }} --build-arg APP_NAME=${{ env.APP_NAME }} --build-arg VERSION=${{ env.VERSION }} .

      - name: Push Docker image
        run: |
          docker tag ${{ env.APP_NAME }}:${{ env.VERSION }}  ${{ secrets.DOCKER_USERNAME }}/${{ env.APP_NAME }}:${{ env.VERSION }} 
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ env.APP_NAME }}:${{ env.VERSION }}    


  deployment:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: temurin
      - name: Read image name and version from Gradle properties
        run: |
          echo "VERSION=$(./gradlew properties -q | grep '^version:' | awk '{print $2}')" >> $GITHUB_ENV
          echo "APP_NAME=$(./gradlew properties -q | grep '^app_name:' | awk '{print $2}')" >> $GITHUB_ENV
          echo "SERVER_PORT=$(./gradlew properties -q | grep '^server.port:' | awk '{print $2}')" >> $GITHUB_ENV
          echo "VERSION=${{ env.VERSION }}" > env.properties
          echo "APP_NAME=${{ env.APP_NAME }}" > env.properties
          echo "SERVER_PORT=${{ env.SERVER_PORT }}" > env.properties
      - name: Print Variables
        run: |
          echo "Building ${{ env.APP_NAME }} version ${{ env.VERSION }} port ${{ env.SERVER_PORT }}"
          echo "Version from step output: ${{ steps.prop-reader.outputs.VERSION }}"

      - name: Set up gcloud
        uses: google-github-actions/setup-gcloud@v0.4.0
        with:
          project_id: ${{secrets.GCP_PROJECT_ID}}
          service_account_key: ${{ secrets.GCP_SA_KEY }}

      - name: Deploy latest docker image
        run: |
          VM_IP=$(gcloud compute instances describe ${{ secrets.GCP_VM_NAME }} \
          --zone ${{ secrets.GCP_VM_ZONE }} \
          --format 'get(networkInterfaces[0].accessConfigs[0].natIP)')
          gcloud compute ssh ${{ secrets.GCP_VM_NAME }} \
          --zone ${{ secrets.GCP_VM_ZONE }} \
          --command "sudo docker stop ${{ env.APP_NAME }} || true \
          && sudo docker rm ${{ env.APP_NAME }} || true \
          && sudo docker images | grep '${{ env.APP_NAME }}' | awk '{print $3}' | xargs -r sudo docker rmi -f  || true \
          && sudo docker pull ${{ secrets.DOCKER_USERNAME }}/${{ env.APP_NAME }}:${{ env.VERSION }} \
          && sudo docker run -e HOST_IP=$VM_IP -d -p ${{ env.SERVER_PORT }}:${{ env.SERVER_PORT }} --name ${{ env.APP_NAME }} ${{ secrets.DOCKER_USERNAME }}/${{ env.APP_NAME }}:${{ env.VERSION }} \
          && sudo docker images \
          && sudo docker ps -a"

  test:
    needs: deployment
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: temurin
      - name: Read image name and version from Gradle properties
        run: |
          echo "SERVER_PORT=$(./gradlew properties -q | grep '^server.port:' | awk '{print $2}')" >> $GITHUB_ENV
          echo "SERVER_PORT=${{ env.SERVER_PORT }}" > env.properties
      - name: Test Deployment
        run: |
          response=$(curl http://${{ secrets.GCP_VM_IP }}:${{ env.SERVER_PORT }}/feed/health)
          echo "$response"
